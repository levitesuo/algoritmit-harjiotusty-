Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def a_star(start, goal, node_list, heurestic_function):
    26                                               '''
    27                                               Finds the best path in node_list. Returns a dict with {'cost': , 'path': , 'closed_list': }
    28                                           
    29                                                   Parameters:
    30                                                       start (int): A integer indicating from where on the node list to start.
    31                                                       goal (int): A integer indicating a goal in the node_list.
    32                                                       node_list (list): List of nodes that have verticies and some values. (See src/algorithms/objects/node.py)
    33                                                       heurestic_function (function): a function that takes in three inputs (position, goal, node_list) and spits out a heurestic estimate for the length of the route.
    34                                           
    35                                                   Returns:
    36                                                       Result (dict): A dictionary containing path, cost and closed_list aka. visited cells.
    37                                               '''
    38         1          0.7      0.7      0.0      size = len(node_list)
    39         1       2101.6   2101.6      0.4      closed_list = [False for _ in range(size)]
    40         1          0.2      0.2      0.0      open_list = []
    41         1          1.0      1.0      0.0      node_list[start].g = 0
    42         1          0.8      0.8      0.0      heappush(open_list, (0, start))
    43     73387       6753.3      0.1      1.2      while open_list:
    44     73387      40981.4      0.6      7.3          _, p = heappop(open_list)
    45     73387      12211.8      0.2      2.2          g = node_list[p].g
    46     73387      17304.9      0.2      3.1          closed_list[p] = node_list[p].g+1
    47     73387       8948.6      0.1      1.6          if goal == p:
    48         1        237.8    237.8      0.0              result = find_path(node_list, goal)
    49         1          0.5      0.5      0.0              result['cost'] = node_list[p].g
    50         1          0.3      0.3      0.0              result['closed'] = closed_list
    51         1          0.1      0.1      0.0              return result
    52    656708     106447.3      0.2     19.0          for cost, new_p in node_list[p].edges:
    53    583322      71393.8      0.1     12.7              if not closed_list[new_p]:
    54    246955      38061.4      0.2      6.8                  new_g = cost + g
    55    246955      72280.1      0.3     12.9                  h = heurestic_function(node_list, new_p, goal)
    56    246955      43509.0      0.2      7.8                  new_f = h + new_g
    57    246955      88390.1      0.4     15.8                  if node_list[new_p].f == float('inf') or node_list[new_p].f > new_f:
    58     73549      17145.1      0.2      3.1                      heappush(open_list, (new_f, new_p))
    59     73549      12091.7      0.2      2.2                      node_list[new_p].f = new_f
    60     73549      11048.7      0.2      2.0                      node_list[new_p].g = new_g
    61     73549      11455.0      0.2      2.0                      node_list[new_p].parent = p
    62                                               return False