Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def a_star(start, goal, node_list, heurestic_function):
    27                                               '''
    28                                               Finds the best path in node_list. Returns a dict with {'cost': , 'path': , 'closed_list': }
    29                                           
    30                                                   Parameters:
    31                                                       start (int): A integer indicating from where on the node list to start.
    32                                                       goal (int): A integer indicating a goal in the node_list.
    33                                                       node_list (list): List of nodes that have verticies and some values. (See src/algorithms/objects/node.py)
    34                                                       heurestic_function (function): a function that takes in three inputs (position, goal, node_list) and spits out a heurestic estimate for the length of the route.
    35                                           
    36                                                   Returns:
    37                                                       Result (dict): A dictionary containing path, cost and closed_list aka. visited cells.
    38                                               '''
    39         1          0.6      0.6      0.0      size = len(node_list)
    40         1       1223.7   1223.7      0.5      closed_list = [False for _ in range(size)]
    41         1          0.1      0.1      0.0      open_list = []
    42         1          1.2      1.2      0.0      node_list[start].g = 0
    43         1          0.9      0.9      0.0      heappush(open_list, (0, start))
    44     26942       2889.2      0.1      1.1      while open_list:
    45     26942      19568.8      0.7      7.3          _, p = heappop(open_list)
    46     26942       6462.9      0.2      2.4          g = node_list[p].g
    47     26942       7902.0      0.3      3.0          closed_list[p] = node_list[p].g+1
    48     26942       3669.2      0.1      1.4          if goal == p:
    49         1        133.3    133.3      0.1              result = find_path(node_list, goal)
    50         1          0.5      0.5      0.0              result['cost'] = node_list[p].g
    51         1          0.6      0.6      0.0              result['closed'] = closed_list
    52         1          0.1      0.1      0.0              return result
    53    241172      48703.3      0.2     18.3          for cost, new_p in node_list[p].edges:
    54    214231      29463.6      0.1     11.0              if not closed_list[new_p]:
    55     91182      15833.9      0.2      5.9                  new_g = cost + g
    56     91182      56046.9      0.6     21.0                  h = heurestic_function(node_list[new_p], node_list[goal], size)
    57     91182      15695.9      0.2      5.9                  new_f = h + new_g
    58     91182      37086.3      0.4     13.9                  if node_list[new_p].f == float('inf') or node_list[new_p].f > new_f:
    59     27668       7377.3      0.3      2.8                      heappush(open_list, (new_f, new_p))
    60     27668       4768.3      0.2      1.8                      node_list[new_p].f = new_f
    61     27668       5326.0      0.2      2.0                      node_list[new_p].g = new_g
    62     27668       4502.8      0.2      1.7                      node_list[new_p].parent = p
    63                                               return False