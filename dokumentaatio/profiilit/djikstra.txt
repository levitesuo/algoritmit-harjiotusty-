Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def a_star(start, goal, node_list, heurestic_function):
    27                                               '''
    28                                               Finds the best path in node_list. Returns a dict with {'cost': , 'path': , 'closed_list': }
    29                                           
    30                                                   Parameters:
    31                                                       start (int): A integer indicating from where on the node list to start.
    32                                                       goal (int): A integer indicating a goal in the node_list.
    33                                                       node_list (list): List of nodes that have verticies and some values. (See src/algorithms/objects/node.py)
    34                                                       heurestic_function (function): a function that takes in three inputs (position, goal, node_list) and spits out a heurestic estimate for the length of the route.
    35                                           
    36                                                   Returns:
    37                                                       Result (dict): A dictionary containing path, cost and closed_list aka. visited cells.
    38                                               '''
    39         1          0.7      0.7      0.0      size = len(node_list)
    40         1       1116.5   1116.5      0.4      closed_list = [False for _ in range(size)]
    41         1          0.2      0.2      0.0      open_list = []
    42         1          0.8      0.8      0.0      node_list[start].g = 0
    43         1          0.8      0.8      0.0      heappush(open_list, (0, start))
    44     33291       3698.2      0.1      1.4      while open_list:
    45     33291      17994.7      0.5      6.6          _, p = heappop(open_list)
    46     33291       5946.5      0.2      2.2          g = node_list[p].g
    47     33291       8053.3      0.2      3.0          closed_list[p] = node_list[p].g+1
    48     33291       4100.1      0.1      1.5          if goal == p:
    49         1        122.3    122.3      0.0              result = find_path(node_list, goal)
    50         1          0.6      0.6      0.0              result['cost'] = node_list[p].g
    51         1          0.2      0.2      0.0              result['closed'] = closed_list
    52         1          0.1      0.1      0.0              return result
    53    297559      49672.5      0.2     18.3          for cost, new_p in node_list[p].edges:
    54    264269      33333.6      0.1     12.3              if not closed_list[new_p]:
    55    119980      19297.3      0.2      7.1                  new_g = cost + g
    56    119980      41110.2      0.3     15.1                  h = heurestic_function(node_list[new_p], node_list[goal], size)
    57    119980      21713.6      0.2      8.0                  new_f = h + new_g
    58    119980      42499.3      0.4     15.6                  if node_list[new_p].f == float('inf') or node_list[new_p].f > new_f:
    59     33497       7683.6      0.2      2.8                      heappush(open_list, (new_f, new_p))
    60     33497       5523.3      0.2      2.0                      node_list[new_p].f = new_f
    61     33497       5037.5      0.2      1.9                      node_list[new_p].g = new_g
    62     33497       4672.5      0.1      1.7                      node_list[new_p].parent = p
    63                                               return False