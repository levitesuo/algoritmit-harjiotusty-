Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def fringe_search(start, goal, node_list, heurestic_function):
     8                                               '''
     9                                               Finds the best path in node_list. Returns a dict with {'cost': , 'path': , 'closed_list': }
    10                                           
    11                                                   Parameters:
    12                                                       start (int): A integer indicating from where on the node list to start.
    13                                                       goal (int): A integer indicating a goal in the node_list.
    14                                                       node_list (list): List of nodes that have verticies and some values. (See src/algorithms/objects/node.py)
    15                                                       heurestic_function (function): a function that takes in three inputs (position, goal, node_list) and spits out a heurestic estimate for the length of the route.
    16                                           
    17                                                   Returns:
    18                                                       Result (dict): A dictionary containing path, cost and closed_list aka. visited cells.
    19                                               '''
    20         1          0.9      0.9      0.0      size = len(node_list)
    21         1      26250.9  26250.9      0.1      fringe = LinkedList(size, start)
    22         1       2114.0   2114.0      0.0      cache = [False for _ in range(size)]
    23                                           
    24         1          0.2      0.2      0.0      cache[start] = (0, None)
    25         1         11.8     11.8      0.0      node_list[start].h = heurestic_function(node_list, start, goal)
    26         1          0.8      0.8      0.0      f_lim = node_list[start].h
    27                                           
    28         1          0.1      0.1      0.0      found = False
    29                                           
    30     32199       4907.5      0.2      0.0      while found is False or fringe.empty():
    31     32198      10769.7      0.3      0.0          f_min = float('inf')
    32                                                   # Linked list has a default start node at size ** 2
    33     32198       4271.0      0.1      0.0          fringe.i = size
    34  15282644    8003743.2      0.5     34.9          while fringe.iterate():
    35  15250447    1813438.6      0.1      7.9              n = fringe.i
    36  15250447    2434426.3      0.2     10.6              g, _ = cache[n]
    37  15250447    3044134.0      0.2     13.3              f = g + node_list[n].h
    38  15250447    1932511.5      0.1      8.4              if f > f_lim:
    39  15218249    3596979.8      0.2     15.7                  f_min = min(f, f_min)
    40  15218249    1520505.0      0.1      6.6                  continue
    41     32198       6192.7      0.2      0.0              if n == goal:
    42         1          0.2      0.2      0.0                  found = True
    43         1          0.2      0.2      0.0                  break
    44    288484      53409.8      0.2      0.2              for i in range(len(node_list[n].edges) - 1, -1, -1):
    45    256287      63754.9      0.2      0.3                  cost, s = node_list[n].edges[i]
    46    256287      38949.6      0.2      0.2                  g_s = g + cost
    47    256287      35137.6      0.1      0.2                  if cache[s]:
    48    223656      42044.3      0.2      0.2                      g_c, _ = cache[s]
    49    223656      30345.0      0.1      0.1                      if g_s >= g_c:
    50    190616      19170.4      0.1      0.1                          continue
    51                                                           else:
    52     32631      57049.6      1.7      0.2                      node_list[s].h = heurestic_function(node_list, s, goal)
    53     65671      55897.0      0.9      0.2                  fringe.delete_if_able(s)
    54     65671      55219.4      0.8      0.2                  fringe.insert_after(s)
    55     65671      14941.0      0.2      0.1                  cache[s] = (g_s, n)
    56     32197      39334.6      1.2      0.2              fringe.delete_current()
    57     32198       5061.4      0.2      0.0          f_lim = f_min
    58         1          0.1      0.1      0.0      if found:
    59         1          0.2      0.2      0.0          path = [goal]
    60         1          0.2      0.2      0.0          _, parent = cache[goal]
    61       225         19.2      0.1      0.0          while parent is not None:
    62       224         40.5      0.2      0.0              path.append(parent)
    63       224         76.5      0.3      0.0              _, new_parent = cache[parent]
    64       224         20.3      0.1      0.0              parent = new_parent
    65         1          0.8      0.8      0.0          return {'path': path, 'cost': g, 'cache': cache}